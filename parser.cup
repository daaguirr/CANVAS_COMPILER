package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {: protected Lexer lexer; :}

init with {: 
	ComplexSymbolFactory f = new ComplexSymbolFactory(); 
	symbolFactory = f;
	File file = new File("input.txt");  
	FileInputStream fis = null;
	try {
		fis = new FileInputStream(file);
	} catch (IOException e) {
		e.printStackTrace();
	}
	lexer = new Lexer(f,fis); 
:};

scan with {: return lexer.next_token(); :};

terminal IF, WHILE , THEN , ELSE ,BAJARP, SUBIRP , COLORP, DIRP , DO;
terminal AVAZ , TABCOL , BORDE , PLUMADIR , PLUMACOL, PLUMAUP, PLUMADOWN ,AND, OR;
terminal NOT, SEMI, BRACKETL, BRACKETR;
		
terminal Character c;
terminal Character d;
terminal Integer num;

non terminal op, expr;

precedence left SEMI;
precedence left AND;
precedence left OR;

start with op;
  
op 	::= 	BAJARP {: System.out.println("bajar-pluma"); :}
			| SUBIRP {:;:}
			| COLORP c:c1 {:;:} 
			| DIRP d:d1 {:;:}
			| AVAZ num:num1 {:;:}
			| IF expr:e1 THEN BRACKETL op:o1 BRACKETR {:;:}
			| IF expr:e1 THEN BRACKETL op:o1 BRACKETR ELSE BRACKETL op:o2 BRACKETR {:;:}
			| WHILE expr:e1 DO BRACKETL op:o1 BRACKETR {: System.out.println(e1); :}
			| op:o1 SEMI op:o2 {:;:}
			;

expr ::= 	TABCOL c:c1 {:;:}
			| BORDE	{: System.out.println("borde"); :}
			| PLUMADIR d:d1 {:;:}
			| PLUMACOL c:c1 {:;:}
			| PLUMAUP {:;:}
			| PLUMADOWN {:;:}
			| expr:e1 AND expr:e2 {:;:}
			| expr:e1 OR expr:e2 {:;:}
			| NOT expr:e1 {:;:}
			;

            


